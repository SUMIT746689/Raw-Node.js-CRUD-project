"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
exports.delimiter = () => path.delimiter;
exports.split = (str, delim = exports.delimiter()) => str.split(delim);
exports.join = (array, delim = exports.delimiter()) => array.join(delim);
function pathString(str, delim) {
    return pathArray(exports.split(str, delim), delim);
}
exports.pathString = pathString;
function pathArray(array, delim = exports.delimiter()) {
    const append = (addend) => pathArray(array.concat(...addend), delim);
    const prepend = (addend) => pathArray(addend.concat(...array), delim);
    const surround = (addend) => pathArray(addend.concat(...array).concat(...addend), delim);
    const deduplicate = () => pathArray(Array.from(new Set(array)), delim);
    return {
        get: {
            array: () => array,
            string: () => exports.join(array, delim),
            delim: () => delim
        },
        set: {
            array: (x) => pathArray(x, delim),
            string: (x) => pathString(x, delim),
            delim: (x) => pathArray(array, x)
        },
        append,
        prepend,
        surround,
        deduplicate
    };
}
exports.pathArray = pathArray;
function pathEnv(env, name = 'PATH', delim = exports.delimiter()) {
    const _a = name, _b = env[_a], str = _b === void 0 ? '' : _b, restEnv = tslib_1.__rest(env, [typeof _a === "symbol" ? _a : _a + ""]);
    const factory = pathString(str, delim);
    function main(factory, name, delim) {
        const replaceFactory = (x) => main(x, name, x.get.delim());
        return {
            get: {
                path: {
                    name: () => name,
                    factory: () => factory
                },
                env: () => (Object.assign({ [name]: factory.get.string() }, restEnv)),
                rest: () => restEnv
            },
            set: {
                factory: replaceFactory,
                name: (x) => main(factory, x, delim),
                delim: (x) => main(factory, name, x)
            },
            path: {
                get: Object.assign(Object.assign({}, factory.get), { factory: () => factory, name: () => name }),
                set: {
                    factory: replaceFactory,
                    string: (x) => main(factory.set.string(x), name, delim),
                    array: (x) => main(factory.set.array(x), name, delim),
                    delim: (x) => main(factory.set.delim(x), name, x),
                    name: (x) => main(factory, x, delim)
                },
                append: (addend) => replaceFactory(factory.append(addend)),
                prepend: (addend) => replaceFactory(factory.prepend(addend)),
                surround: (addend) => replaceFactory(factory.surround(addend)),
                deduplicate: () => replaceFactory(factory.deduplicate())
            }
        };
    }
    return main(factory, name, delim);
}
exports.pathEnv = pathEnv;
//# sourceMappingURL=path-env.js.map